
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftADDSUBleftMULDIVMODADD AND CHARACTER COLON COMMA COMMENT DEC DIV EEQUAL ELSE EQUAL FALSE FOR IDF IF IN INC INF INFEQUAL INTEGER LACCO LBRACKET LOGICAL LPAREN MOD MUL NEWLINE NOTEQUAL NUMERIC OR RACCO RBRACKET RPAREN SUB SUP SUPEQUAL TRUE WHILE character_value integer_value numeric_value\n    STARTER : INSTRUCTION_BLOCK\n            | NEWLINE INSTRUCTION_BLOCK\n    \n    INSTRUCTION_BLOCK : INSTRUCTION_BLOCK INST NEWLINE\n              | INST NEWLINE\n              | IF_CLAUSE\n              | WHILE_INSTRUCTION\n              | FOR_INSTRUCTION\n              | INSTRUCTION_BLOCK IF_CLAUSE\n              | INSTRUCTION_BLOCK WHILE_INSTRUCTION\n              | INSTRUCTION_BLOCK FOR_INSTRUCTION\n    \n    INST : DECLARATION\n         | AFFECT\n         | AFFECT_COND\n         | INCR\n         | DECR\n         | COMMENT\n    \n    INCR : IDF INC integer_value\n    \n    DECR : IDF DEC integer_value\n    \n    AFFECT : IDF EQUAL EXPR\n    \n    AFFECT : IDF EQUAL character_value\n    \n    DECLARATION : TYPE AFFECT\n                | DECLARATION_MULTIPLE\n    \n    DECLARATION_MULTIPLE : TYPE IDF\n    \n    DECLARATION_MULTIPLE : DECLARATION_MULTIPLE COMMA IDF\n    \n    DECLARATION : ARRAY_DECLARATION\n    \n    ARRAY_DECLARATION : TYPE IDF LBRACKET integer_value RBRACKET\n    \n    TYPE : INTEGER\n         | NUMERIC\n         | CHARACTER\n         | LOGICAL\n    \n    EXPR : ARITHMETICAL_EXPRESSION\n         | COMPARE_EXPRESSION\n         | LOGICAL_EXPRESSION\n    \n    ARITHMETICAL_EXPRESSION : ARITHMETICAL_EXPRESSION ADD ARITHMETICAL_EXPRESSION\n                      | ARITHMETICAL_EXPRESSION SUB ARITHMETICAL_EXPRESSION\n                      | ARITHMETICAL_EXPRESSION MUL ARITHMETICAL_EXPRESSION\n                      | ARITHMETICAL_EXPRESSION DIV ARITHMETICAL_EXPRESSION\n                      | ARITHMETICAL_EXPRESSION MOD ARITHMETICAL_EXPRESSION\n                      | VALUE\n    \n    ARITHMETICAL_EXPRESSION : IDF\n                      | IDF LBRACKET ARITHMETICAL_EXPRESSION RBRACKET\n    \n    ARITHMETICAL_EXPRESSION : LPAREN ARITHMETICAL_EXPRESSION RPAREN\n    \n    COMPARE_EXPRESSION : ARITHMETICAL_EXPRESSION COMPARISON_OPERATOR ARITHMETICAL_EXPRESSION\n    \n    COMPARE_EXPRESSION : LPAREN COMPARE_EXPRESSION RPAREN\n    \n    LOGICAL_EXPRESSION : EXPR AND EXPR\n    | EXPR OR EXPR\n    \n    LOGICAL_EXPRESSION : LOGICAL_VALUE\n    \n    LOGICAL_EXPRESSION : LPAREN LOGICAL_EXPRESSION RPAREN\n    \n    COMPARISON_OPERATOR : SUP\n                  | INF\n                  | SUPEQUAL\n                  | INFEQUAL\n                  | EEQUAL\n                  | NOTEQUAL\n    \n    LOGICAL_VALUE : TRUE\n                  | FALSE\n    \n    VALUE : integer_value\n    \n    VALUE : numeric_value\n    \n    AFFECT_COND : AFF_COND_EXP EXPR RPAREN\n    \n    AFF_COND_EXP : AFF_COND_DEB EXPR COMMA\n    \n    AFF_COND_DEB : IDF EQUAL LPAREN EXPR COMMA\n    \n    IF_CLAUSE : IF_INSTRUCTION NEWLINE\n              | IF_ELSE_BLOC INSTRUCTION_BLOCK RACCO NEWLINE\n\n    \n    IF_INSTRUCTION : IF_CONDITION NEWLINE LACCO NEWLINE INSTRUCTION_BLOCK RACCO\n            | ELSE_IF_CONDITION LACCO NEWLINE INSTRUCTION_BLOCK RACCO\n    \n    IF_CONDITION : IF LPAREN EXPR RPAREN\n\n    \n    IF_ELSE_BLOC : IF_INSTRUCTION NEWLINE ELSE NEWLINE LACCO NEWLINE\n    \n    ELSE_IF : IF_INSTRUCTION NEWLINE ELSE IF\n    \n    ELSE_IF_CONDITION : ELSE_IF LPAREN EXPR RPAREN NEWLINE\n    \n    WHILE_INSTRUCTION : WHILE_COND LACCO NEWLINE INSTRUCTION_BLOCK RACCO NEWLINE\n    \n    WHILE_COND : WHILE_START LPAREN EXPR RPAREN NEWLINE\n    \n    WHILE_START : WHILE\n    \n     FOR_INSTRUCTION : FOR_CONDITION LACCO NEWLINE INSTRUCTION_BLOCK RACCO NEWLINE\n    \n    FOR_CONDITION : FOR_START for_int RPAREN NEWLINE\n    \n    FOR_START : FOR LPAREN IDF IN for_int COLON\n    \n    for_int : IDF\n            | integer_value\n    '
    
_lr_action_items = {'NEWLINE':([0,4,8,9,10,11,12,13,14,19,20,23,36,44,45,46,47,53,54,55,56,57,59,60,61,62,63,65,75,76,81,82,83,85,86,87,107,110,123,124,125,127,128,129,130,131,133,134,135,138,140,141,143,144,145,146,149,151,158,],[3,41,-11,-12,-13,-14,-15,-16,42,-22,-25,64,74,77,78,-21,-23,-31,-32,-33,-39,-40,-47,-57,-58,-55,-56,108,115,117,-24,-19,-20,-17,-18,-59,136,139,-45,-46,-34,-35,-36,-37,-38,-43,-42,-44,-48,152,-66,153,155,156,157,-26,-41,-65,-64,]),'COMMENT':([0,2,3,5,6,7,15,37,38,39,40,41,42,43,74,77,78,108,117,118,119,136,137,150,155,156,157,],[13,13,13,-5,-6,-7,13,-8,-9,-10,13,-4,-62,13,-3,13,13,13,-63,13,13,13,13,13,-67,-70,-73,]),'IDF':([0,2,3,5,6,7,15,18,22,26,27,28,29,30,31,37,38,39,40,41,42,43,48,49,58,66,71,72,73,74,77,78,80,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,108,111,117,118,119,126,136,137,142,147,150,155,156,157,159,],[21,21,21,-5,-6,-7,21,47,57,68,-27,-28,-29,-30,57,-8,-9,-10,21,-4,-62,21,81,57,57,57,57,57,114,-3,21,21,57,57,57,57,57,57,57,57,57,57,-49,-50,-51,-52,-53,-54,57,21,-60,-63,21,21,57,21,21,68,-61,21,-67,-70,-73,-75,]),'INTEGER':([0,2,3,5,6,7,15,37,38,39,40,41,42,43,74,77,78,108,117,118,119,136,137,150,155,156,157,],[27,27,27,-5,-6,-7,27,-8,-9,-10,27,-4,-62,27,-3,27,27,27,-63,27,27,27,27,27,-67,-70,-73,]),'NUMERIC':([0,2,3,5,6,7,15,37,38,39,40,41,42,43,74,77,78,108,117,118,119,136,137,150,155,156,157,],[28,28,28,-5,-6,-7,28,-8,-9,-10,28,-4,-62,28,-3,28,28,28,-63,28,28,28,28,28,-67,-70,-73,]),'CHARACTER':([0,2,3,5,6,7,15,37,38,39,40,41,42,43,74,77,78,108,117,118,119,136,137,150,155,156,157,],[29,29,29,-5,-6,-7,29,-8,-9,-10,29,-4,-62,29,-3,29,29,29,-63,29,29,29,29,29,-67,-70,-73,]),'LOGICAL':([0,2,3,5,6,7,15,37,38,39,40,41,42,43,74,77,78,108,117,118,119,136,137,150,155,156,157,],[30,30,30,-5,-6,-7,30,-8,-9,-10,30,-4,-62,30,-3,30,30,30,-63,30,30,30,30,30,-67,-70,-73,]),'IF':([0,2,3,5,6,7,15,37,38,39,40,41,42,43,74,75,77,78,108,117,118,119,136,137,150,155,156,157,],[32,32,32,-5,-6,-7,32,-8,-9,-10,32,-4,-62,32,-3,116,32,32,32,-63,32,32,32,32,32,-67,-70,-73,]),'WHILE':([0,2,3,5,6,7,15,37,38,39,40,41,42,43,74,77,78,108,117,118,119,136,137,150,155,156,157,],[34,34,34,-5,-6,-7,34,-8,-9,-10,34,-4,-62,34,-3,34,34,34,-63,34,34,34,34,34,-67,-70,-73,]),'FOR':([0,2,3,5,6,7,15,37,38,39,40,41,42,43,74,77,78,108,117,118,119,136,137,150,155,156,157,],[35,35,35,-5,-6,-7,35,-8,-9,-10,35,-4,-62,35,-3,35,35,35,-63,35,35,35,35,35,-67,-70,-73,]),'$end':([1,2,5,6,7,37,38,39,40,41,42,74,117,156,157,],[0,-1,-5,-6,-7,-8,-9,-10,-2,-4,-62,-3,-63,-70,-73,]),'RACCO':([5,6,7,37,38,39,41,42,43,74,117,118,119,137,150,156,157,],[-5,-6,-7,-8,-9,-10,-4,-62,76,-3,-63,144,145,151,158,-70,-73,]),'LACCO':([16,17,24,64,115,139,152,153,],[44,45,65,107,143,-74,-71,-69,]),'COMMA':([19,47,53,54,55,56,57,59,60,61,62,63,70,81,104,105,121,122,123,124,125,127,128,129,130,131,133,134,135,149,],[48,-23,-31,-32,-33,-39,-40,-47,-57,-58,-55,-56,111,-24,-32,-33,147,-31,-45,-46,-34,-35,-36,-37,-38,-43,-42,-44,-48,-41,]),'EQUAL':([21,47,],[49,80,]),'INC':([21,],[50,]),'DEC':([21,],[51,]),'LPAREN':([22,25,31,32,33,34,35,49,58,66,71,72,80,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,111,116,126,147,],[58,66,58,71,72,-72,73,84,58,58,58,58,58,58,58,58,126,126,126,126,126,126,-49,-50,-51,-52,-53,-54,126,-60,-68,126,-61,]),'integer_value':([22,26,31,49,50,51,58,66,71,72,79,80,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,111,126,142,147,159,],[60,69,60,60,85,86,60,60,60,60,120,60,60,60,60,60,60,60,60,60,60,-49,-50,-51,-52,-53,-54,60,-60,60,69,-61,-75,]),'numeric_value':([22,31,49,58,66,71,72,80,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,111,126,147,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-49,-50,-51,-52,-53,-54,61,-60,61,-61,]),'TRUE':([22,31,49,58,66,71,72,80,84,88,89,111,147,],[62,62,62,62,62,62,62,62,62,62,62,-60,-61,]),'FALSE':([22,31,49,58,66,71,72,80,84,88,89,111,147,],[63,63,63,63,63,63,63,63,63,63,63,-60,-61,]),'ELSE':([42,],[75,]),'LBRACKET':([47,57,],[79,102,]),'character_value':([49,80,],[83,83,]),'RPAREN':([52,53,54,55,56,57,59,60,61,62,63,67,68,69,103,104,105,109,112,113,122,123,124,125,127,128,129,130,131,133,134,135,148,149,],[87,-31,-32,-33,-39,-40,-47,-57,-58,-55,-56,110,-76,-77,133,134,135,138,140,141,133,-45,-46,-34,-35,-36,-37,-38,-43,-42,-44,-48,133,-41,]),'AND':([52,53,54,55,56,57,59,60,61,62,63,70,82,103,104,105,106,109,112,113,121,122,123,124,125,127,128,129,130,131,133,134,135,149,],[88,-31,-32,-33,-39,-40,-47,-57,-58,-55,-56,88,88,-31,-32,-33,88,88,88,88,88,-31,-45,88,-34,-35,-36,-37,-38,-43,-42,-44,-48,-41,]),'OR':([52,53,54,55,56,57,59,60,61,62,63,70,82,103,104,105,106,109,112,113,121,122,123,124,125,127,128,129,130,131,133,134,135,149,],[89,-31,-32,-33,-39,-40,-47,-57,-58,-55,-56,89,89,-31,-32,-33,89,89,89,89,89,-31,-45,-46,-34,-35,-36,-37,-38,-43,-42,-44,-48,-41,]),'ADD':([53,56,57,60,61,103,122,125,127,128,129,130,131,132,133,148,149,],[90,-39,-40,-57,-58,90,90,-34,-35,-36,-37,-38,90,90,-42,90,-41,]),'SUB':([53,56,57,60,61,103,122,125,127,128,129,130,131,132,133,148,149,],[91,-39,-40,-57,-58,91,91,-34,-35,-36,-37,-38,91,91,-42,91,-41,]),'MUL':([53,56,57,60,61,103,122,125,127,128,129,130,131,132,133,148,149,],[92,-39,-40,-57,-58,92,92,92,92,-36,-37,-38,92,92,-42,92,-41,]),'DIV':([53,56,57,60,61,103,122,125,127,128,129,130,131,132,133,148,149,],[93,-39,-40,-57,-58,93,93,93,93,-36,-37,-38,93,93,-42,93,-41,]),'MOD':([53,56,57,60,61,103,122,125,127,128,129,130,131,132,133,148,149,],[94,-39,-40,-57,-58,94,94,94,94,-36,-37,-38,94,94,-42,94,-41,]),'SUP':([53,56,57,60,61,103,122,125,127,128,129,130,133,149,],[96,-39,-40,-57,-58,96,96,-34,-35,-36,-37,-38,-42,-41,]),'INF':([53,56,57,60,61,103,122,125,127,128,129,130,133,149,],[97,-39,-40,-57,-58,97,97,-34,-35,-36,-37,-38,-42,-41,]),'SUPEQUAL':([53,56,57,60,61,103,122,125,127,128,129,130,133,149,],[98,-39,-40,-57,-58,98,98,-34,-35,-36,-37,-38,-42,-41,]),'INFEQUAL':([53,56,57,60,61,103,122,125,127,128,129,130,133,149,],[99,-39,-40,-57,-58,99,99,-34,-35,-36,-37,-38,-42,-41,]),'EEQUAL':([53,56,57,60,61,103,122,125,127,128,129,130,133,149,],[100,-39,-40,-57,-58,100,100,-34,-35,-36,-37,-38,-42,-41,]),'NOTEQUAL':([53,56,57,60,61,103,122,125,127,128,129,130,133,149,],[101,-39,-40,-57,-58,101,101,-34,-35,-36,-37,-38,-42,-41,]),'RBRACKET':([56,57,60,61,120,125,127,128,129,130,132,133,149,],[-39,-40,-57,-58,146,-34,-35,-36,-37,-38,149,-42,-41,]),'COLON':([68,69,154,],[-76,-77,159,]),'IN':([114,],[142,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'STARTER':([0,],[1,]),'INSTRUCTION_BLOCK':([0,3,15,77,78,108,136,],[2,40,43,118,119,137,150,]),'INST':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[4,36,4,4,36,36,4,4,4,36,36,4,36,36,]),'IF_CLAUSE':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[5,37,5,5,37,37,5,5,5,37,37,5,37,37,]),'WHILE_INSTRUCTION':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[6,38,6,6,38,38,6,6,6,38,38,6,38,38,]),'FOR_INSTRUCTION':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[7,39,7,7,39,39,7,7,7,39,39,7,39,39,]),'DECLARATION':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'AFFECT':([0,2,3,15,18,40,43,77,78,108,118,119,136,137,150,],[9,9,9,9,46,9,9,9,9,9,9,9,9,9,9,]),'AFFECT_COND':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'INCR':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'DECR':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'IF_INSTRUCTION':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'IF_ELSE_BLOC':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'WHILE_COND':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'FOR_CONDITION':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'TYPE':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'DECLARATION_MULTIPLE':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'ARRAY_DECLARATION':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'AFF_COND_EXP':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'IF_CONDITION':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'ELSE_IF_CONDITION':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'WHILE_START':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'FOR_START':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'AFF_COND_DEB':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'ELSE_IF':([0,2,3,15,40,43,77,78,108,118,119,136,137,150,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'EXPR':([22,31,49,58,66,71,72,80,84,88,89,],[52,70,82,106,109,112,113,82,121,123,124,]),'ARITHMETICAL_EXPRESSION':([22,31,49,58,66,71,72,80,84,88,89,90,91,92,93,94,95,102,126,],[53,53,53,103,53,53,53,53,122,53,53,125,127,128,129,130,131,132,148,]),'COMPARE_EXPRESSION':([22,31,49,58,66,71,72,80,84,88,89,],[54,54,54,104,54,54,54,54,104,54,54,]),'LOGICAL_EXPRESSION':([22,31,49,58,66,71,72,80,84,88,89,],[55,55,55,105,55,55,55,55,105,55,55,]),'VALUE':([22,31,49,58,66,71,72,80,84,88,89,90,91,92,93,94,95,102,126,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'LOGICAL_VALUE':([22,31,49,58,66,71,72,80,84,88,89,],[59,59,59,59,59,59,59,59,59,59,59,]),'for_int':([26,142,],[67,154,]),'COMPARISON_OPERATOR':([53,103,122,],[95,95,95,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> STARTER","S'",1,None,None,None),
  ('STARTER -> INSTRUCTION_BLOCK','STARTER',1,'p_starter','runThis.py',202),
  ('STARTER -> NEWLINE INSTRUCTION_BLOCK','STARTER',2,'p_starter','runThis.py',203),
  ('INSTRUCTION_BLOCK -> INSTRUCTION_BLOCK INST NEWLINE','INSTRUCTION_BLOCK',3,'p_bloc_inst','runThis.py',208),
  ('INSTRUCTION_BLOCK -> INST NEWLINE','INSTRUCTION_BLOCK',2,'p_bloc_inst','runThis.py',209),
  ('INSTRUCTION_BLOCK -> IF_CLAUSE','INSTRUCTION_BLOCK',1,'p_bloc_inst','runThis.py',210),
  ('INSTRUCTION_BLOCK -> WHILE_INSTRUCTION','INSTRUCTION_BLOCK',1,'p_bloc_inst','runThis.py',211),
  ('INSTRUCTION_BLOCK -> FOR_INSTRUCTION','INSTRUCTION_BLOCK',1,'p_bloc_inst','runThis.py',212),
  ('INSTRUCTION_BLOCK -> INSTRUCTION_BLOCK IF_CLAUSE','INSTRUCTION_BLOCK',2,'p_bloc_inst','runThis.py',213),
  ('INSTRUCTION_BLOCK -> INSTRUCTION_BLOCK WHILE_INSTRUCTION','INSTRUCTION_BLOCK',2,'p_bloc_inst','runThis.py',214),
  ('INSTRUCTION_BLOCK -> INSTRUCTION_BLOCK FOR_INSTRUCTION','INSTRUCTION_BLOCK',2,'p_bloc_inst','runThis.py',215),
  ('INST -> DECLARATION','INST',1,'p_inst','runThis.py',220),
  ('INST -> AFFECT','INST',1,'p_inst','runThis.py',221),
  ('INST -> AFFECT_COND','INST',1,'p_inst','runThis.py',222),
  ('INST -> INCR','INST',1,'p_inst','runThis.py',223),
  ('INST -> DECR','INST',1,'p_inst','runThis.py',224),
  ('INST -> COMMENT','INST',1,'p_inst','runThis.py',225),
  ('INCR -> IDF INC integer_value','INCR',3,'p_incr','runThis.py',229),
  ('DECR -> IDF DEC integer_value','DECR',3,'p_decr','runThis.py',241),
  ('AFFECT -> IDF EQUAL EXPR','AFFECT',3,'p_affect','runThis.py',253),
  ('AFFECT -> IDF EQUAL character_value','AFFECT',3,'p_affect_char','runThis.py',267),
  ('DECLARATION -> TYPE AFFECT','DECLARATION',2,'p_declaration','runThis.py',281),
  ('DECLARATION -> DECLARATION_MULTIPLE','DECLARATION',1,'p_declaration','runThis.py',282),
  ('DECLARATION_MULTIPLE -> TYPE IDF','DECLARATION_MULTIPLE',2,'p_declaration_multiple','runThis.py',292),
  ('DECLARATION_MULTIPLE -> DECLARATION_MULTIPLE COMMA IDF','DECLARATION_MULTIPLE',3,'p_declaration_multiple_multiple','runThis.py',301),
  ('DECLARATION -> ARRAY_DECLARATION','DECLARATION',1,'p_TABLE_dECLARATION','runThis.py',310),
  ('ARRAY_DECLARATION -> TYPE IDF LBRACKET integer_value RBRACKET','ARRAY_DECLARATION',5,'p_tab_declaration','runThis.py',316),
  ('TYPE -> INTEGER','TYPE',1,'p_type','runThis.py',325),
  ('TYPE -> NUMERIC','TYPE',1,'p_type','runThis.py',326),
  ('TYPE -> CHARACTER','TYPE',1,'p_type','runThis.py',327),
  ('TYPE -> LOGICAL','TYPE',1,'p_type','runThis.py',328),
  ('EXPR -> ARITHMETICAL_EXPRESSION','EXPR',1,'p_EXPR','runThis.py',334),
  ('EXPR -> COMPARE_EXPRESSION','EXPR',1,'p_EXPR','runThis.py',335),
  ('EXPR -> LOGICAL_EXPRESSION','EXPR',1,'p_EXPR','runThis.py',336),
  ('ARITHMETICAL_EXPRESSION -> ARITHMETICAL_EXPRESSION ADD ARITHMETICAL_EXPRESSION','ARITHMETICAL_EXPRESSION',3,'p_ARITHMETICAL_EXPRESSION','runThis.py',342),
  ('ARITHMETICAL_EXPRESSION -> ARITHMETICAL_EXPRESSION SUB ARITHMETICAL_EXPRESSION','ARITHMETICAL_EXPRESSION',3,'p_ARITHMETICAL_EXPRESSION','runThis.py',343),
  ('ARITHMETICAL_EXPRESSION -> ARITHMETICAL_EXPRESSION MUL ARITHMETICAL_EXPRESSION','ARITHMETICAL_EXPRESSION',3,'p_ARITHMETICAL_EXPRESSION','runThis.py',344),
  ('ARITHMETICAL_EXPRESSION -> ARITHMETICAL_EXPRESSION DIV ARITHMETICAL_EXPRESSION','ARITHMETICAL_EXPRESSION',3,'p_ARITHMETICAL_EXPRESSION','runThis.py',345),
  ('ARITHMETICAL_EXPRESSION -> ARITHMETICAL_EXPRESSION MOD ARITHMETICAL_EXPRESSION','ARITHMETICAL_EXPRESSION',3,'p_ARITHMETICAL_EXPRESSION','runThis.py',346),
  ('ARITHMETICAL_EXPRESSION -> VALUE','ARITHMETICAL_EXPRESSION',1,'p_ARITHMETICAL_EXPRESSION','runThis.py',347),
  ('ARITHMETICAL_EXPRESSION -> IDF','ARITHMETICAL_EXPRESSION',1,'p_ARITHMETICAL_EXPRESSION_IDF','runThis.py',360),
  ('ARITHMETICAL_EXPRESSION -> IDF LBRACKET ARITHMETICAL_EXPRESSION RBRACKET','ARITHMETICAL_EXPRESSION',4,'p_ARITHMETICAL_EXPRESSION_IDF','runThis.py',361),
  ('ARITHMETICAL_EXPRESSION -> LPAREN ARITHMETICAL_EXPRESSION RPAREN','ARITHMETICAL_EXPRESSION',3,'p_ARITHMETICAL_EXPRESSION_PAR','runThis.py',375),
  ('COMPARE_EXPRESSION -> ARITHMETICAL_EXPRESSION COMPARISON_OPERATOR ARITHMETICAL_EXPRESSION','COMPARE_EXPRESSION',3,'p_COMPARE_EXPRESSION','runThis.py',381),
  ('COMPARE_EXPRESSION -> LPAREN COMPARE_EXPRESSION RPAREN','COMPARE_EXPRESSION',3,'p_COMPARE_EXPRESSION_par','runThis.py',390),
  ('LOGICAL_EXPRESSION -> EXPR AND EXPR','LOGICAL_EXPRESSION',3,'p_LOGICAL_EXPRESSION','runThis.py',396),
  ('LOGICAL_EXPRESSION -> EXPR OR EXPR','LOGICAL_EXPRESSION',3,'p_LOGICAL_EXPRESSION','runThis.py',397),
  ('LOGICAL_EXPRESSION -> LOGICAL_VALUE','LOGICAL_EXPRESSION',1,'p_LOGICAL_EXPRESSION2','runThis.py',409),
  ('LOGICAL_EXPRESSION -> LPAREN LOGICAL_EXPRESSION RPAREN','LOGICAL_EXPRESSION',3,'p_LOGICAL_EXPRESSION_par','runThis.py',414),
  ('COMPARISON_OPERATOR -> SUP','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','runThis.py',420),
  ('COMPARISON_OPERATOR -> INF','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','runThis.py',421),
  ('COMPARISON_OPERATOR -> SUPEQUAL','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','runThis.py',422),
  ('COMPARISON_OPERATOR -> INFEQUAL','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','runThis.py',423),
  ('COMPARISON_OPERATOR -> EEQUAL','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','runThis.py',424),
  ('COMPARISON_OPERATOR -> NOTEQUAL','COMPARISON_OPERATOR',1,'p_COMPARISON_OPERATOR','runThis.py',425),
  ('LOGICAL_VALUE -> TRUE','LOGICAL_VALUE',1,'p_logical_value','runThis.py',430),
  ('LOGICAL_VALUE -> FALSE','LOGICAL_VALUE',1,'p_logical_value','runThis.py',431),
  ('VALUE -> integer_value','VALUE',1,'p_value_integer','runThis.py',437),
  ('VALUE -> numeric_value','VALUE',1,'p_value_float','runThis.py',444),
  ('AFFECT_COND -> AFF_COND_EXP EXPR RPAREN','AFFECT_COND',3,'p_AFFECT_COND','runThis.py',450),
  ('AFF_COND_EXP -> AFF_COND_DEB EXPR COMMA','AFF_COND_EXP',3,'p_AFF_COND_EXP','runThis.py',457),
  ('AFF_COND_DEB -> IDF EQUAL LPAREN EXPR COMMA','AFF_COND_DEB',5,'p_AFF_COND_DEB','runThis.py',469),
  ('IF_CLAUSE -> IF_INSTRUCTION NEWLINE','IF_CLAUSE',2,'p_IF_CLAUSE','runThis.py',478),
  ('IF_CLAUSE -> IF_ELSE_BLOC INSTRUCTION_BLOCK RACCO NEWLINE','IF_CLAUSE',4,'p_IF_CLAUSE','runThis.py',479),
  ('IF_INSTRUCTION -> IF_CONDITION NEWLINE LACCO NEWLINE INSTRUCTION_BLOCK RACCO','IF_INSTRUCTION',6,'p_IF_INSTRUCTION','runThis.py',489),
  ('IF_INSTRUCTION -> ELSE_IF_CONDITION LACCO NEWLINE INSTRUCTION_BLOCK RACCO','IF_INSTRUCTION',5,'p_IF_INSTRUCTION','runThis.py',490),
  ('IF_CONDITION -> IF LPAREN EXPR RPAREN','IF_CONDITION',4,'p_IF_CONDITION','runThis.py',495),
  ('IF_ELSE_BLOC -> IF_INSTRUCTION NEWLINE ELSE NEWLINE LACCO NEWLINE','IF_ELSE_BLOC',6,'p_IF_ELSE_BLOCK','runThis.py',503),
  ('ELSE_IF -> IF_INSTRUCTION NEWLINE ELSE IF','ELSE_IF',4,'p_ELSE_IF','runThis.py',516),
  ('ELSE_IF_CONDITION -> ELSE_IF LPAREN EXPR RPAREN NEWLINE','ELSE_IF_CONDITION',5,'p_ELSE_IF_CONDITION','runThis.py',530),
  ('WHILE_INSTRUCTION -> WHILE_COND LACCO NEWLINE INSTRUCTION_BLOCK RACCO NEWLINE','WHILE_INSTRUCTION',6,'p_WHILE_INSTRUCTION','runThis.py',537),
  ('WHILE_COND -> WHILE_START LPAREN EXPR RPAREN NEWLINE','WHILE_COND',5,'p_while_cond','runThis.py',545),
  ('WHILE_START -> WHILE','WHILE_START',1,'p_while_start','runThis.py',552),
  ('FOR_INSTRUCTION -> FOR_CONDITION LACCO NEWLINE INSTRUCTION_BLOCK RACCO NEWLINE','FOR_INSTRUCTION',6,'p_for_block','runThis.py',558),
  ('FOR_CONDITION -> FOR_START for_int RPAREN NEWLINE','FOR_CONDITION',4,'p_for_condition','runThis.py',567),
  ('FOR_START -> FOR LPAREN IDF IN for_int COLON','FOR_START',6,'p_for_start','runThis.py',574),
  ('for_int -> IDF','for_int',1,'p_for_int','runThis.py',583),
  ('for_int -> integer_value','for_int',1,'p_for_int','runThis.py',584),
]
